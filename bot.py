import os
import asyncio
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

from functions_for_agent import (
    answer_question_about_contract,
    find_best_contract_template,
    legal_audit_from_gk  # üëà –¥–æ–±–∞–≤–ª–µ–Ω–æ
)
from config import BOT_TOKEN

load_dotenv()
PDF_PATH = "dogovors/latest.pdf"
TEMPLATE_PATH = "dogovors/temp_template.pdf"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())


# –°–æ—Å—Ç–æ—è–Ω–∏—è
class Form(StatesGroup):
    waiting_for_question = State()
    waiting_for_template_query = State()
    waiting_for_audit = State()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ù–∞–π—Ç–∏ –∏–Ω—Ñ—É –≤ –¥–æ–≥–æ–≤–æ—Ä–µ")],
        [KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω")],
        [KeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è –≤ –ì–ö –†–§")]
    ],
    resize_keyboard=True
)


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(F.text == "/start")
async def on_start(message: Message, state: FSMContext):
    await state.clear()

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
    folder = "dogovors"
    for f in os.listdir(folder):
        try:
            os.remove(os.path.join(folder, f))
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {f}: {e}")

    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏—Ç–µ PDF-–¥–æ–∫—É–º–µ–Ω—Ç –¥–æ–≥–æ–≤–æ—Ä–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:", reply_markup=menu_keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF
@dp.message(F.document)
async def on_pdf(message: Message, state: FSMContext):
    if not message.document.file_name.endswith(".pdf"):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª.")
        return
    await bot.download(message.document, destination=PDF_PATH)
    await message.answer("üìÑ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:", reply_markup=menu_keyboard)


# –ù–∞–π—Ç–∏ –∏–Ω—Ñ—É
@dp.message(F.text == "–ù–∞–π—Ç–∏ –∏–Ω—Ñ—É –≤ –¥–æ–≥–æ–≤–æ—Ä–µ")
async def on_search_info(message: Message, state: FSMContext):
    if not os.path.exists(PDF_PATH):
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-–¥–æ–∫—É–º–µ–Ω—Ç.")
        return
    await message.answer("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –≤ –¥–æ–≥–æ–≤–æ—Ä–µ:")
    await state.set_state(Form.waiting_for_question)


@dp.message(Form.waiting_for_question)
async def on_question_input(message: Message, state: FSMContext):
    try:
        await message.answer("–ò—â—É –æ—Ç–≤–µ—Ç –≤ –¥–æ–≥–æ–≤–æ—Ä–µ...")
        await message.answer("‚è≥")
        answer = answer_question_about_contract(PDF_PATH, message.text)
        await message.answer(f"–û—Ç–≤–µ—Ç:\n{answer}")
    except Exception as e:
        await message.answer(f"‚ùó –û—à–∏–±–∫–∞: {str(e)}")
    await state.clear()


# –ü–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω
@dp.message(F.text == "–ü–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω")
async def on_get_template(message: Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–π —à–∞–±–ª–æ–Ω –¥–æ–≥–æ–≤–æ—Ä–∞ –≤—ã –∏—â–µ—Ç–µ:")
    await state.set_state(Form.waiting_for_template_query)


@dp.message(Form.waiting_for_template_query)
async def on_template_request(message: Message, state: FSMContext):
    try:
        await message.answer("–ò—â—É –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à–∞–±–ª–æ–Ω...")
        await message.answer("‚è≥")

        result = find_best_contract_template(user_query=message.text)

        if result["status"] == "ok":
            import shutil
            shutil.copyfile(result["path"], TEMPLATE_PATH)

            await message.answer_document(
                types.FSInputFile(TEMPLATE_PATH),
                caption="–í–æ—Ç –ª—É—á—à–∏–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω.\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à –¥–æ–≥–æ–≤–æ—Ä, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –∫ –Ω–µ–º—É –≤–æ–ø—Ä–æ—Å—ã."
            )
        else:
            # —à–∞–±–ª–æ–Ω–∞ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç GigaChat
            await message.answer(result["message"])

    except Exception as e:
        await message.answer(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —à–∞–±–ª–æ–Ω–∞: {str(e)}")

    await state.clear()

TOPICS = [
    "–û–±—Ä–∞–∑—Ü—ã –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –∞—Ä–µ–Ω–¥—ã",
    "–û–±—Ä–∞–∑—Ü—ã –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –∞—Ä–µ–Ω–¥—ã –∫–≤–∞—Ä—Ç–∏—Ä—ã",
    "–î–æ–≥–æ–≤–æ—Ä—ã –∞—Ä–µ–Ω–¥—ã –∫–æ–º–Ω–∞—Ç—ã",
    "–î–æ–≥–æ–≤–æ—Ä—ã –∞—Ä–µ–Ω–¥—ã –≥–∞—Ä–∞–∂–∞",
    "–î–æ–≥–æ–≤–æ—Ä—ã –∞—Ä–µ–Ω–¥—ã –Ω–µ–∂–∏–ª–æ–≥–æ –ø–æ–º–µ—â–µ–Ω–∏—è",
    "–î–æ–≥–æ–≤–æ—Ä—ã –∞—Ä–µ–Ω–¥—ã —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–æ–º–µ—â–µ–Ω–∏—è",
    "–î–æ–≥–æ–≤–æ—Ä—ã –∞—Ä–µ–Ω–¥—ã –∑–¥–∞–Ω–∏–π",
    "–î–æ–≥–æ–≤–æ—Ä—ã –∞—Ä–µ–Ω–¥—ã –∑–µ–º–µ–ª—å–Ω–æ–≥–æ —É—á–∞—Å—Ç–∫–∞",
    "–î–æ–≥–æ–≤–æ—Ä—ã –∞—Ä–µ–Ω–¥—ã –º–∞—à–∏–Ω–æ–º–µ—Å—Ç–∞",
    "–î–æ–≥–æ–≤–æ—Ä—ã –∞—Ä–µ–Ω–¥—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
    "–î–æ–≥–æ–≤–æ—Ä—ã –∞—Ä–µ–Ω–¥—ã —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏",
    "–î–æ–≥–æ–≤–æ—Ä—ã –∞—Ä–µ–Ω–¥—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
    "–î–æ–≥–æ–≤–æ—Ä—ã –∞—Ä–µ–Ω–¥—ã –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
    "–î–æ–≥–æ–≤–æ—Ä—ã –∞—Ä–µ–Ω–¥—ã —Å –ø—Ä–∞–≤–æ–º –≤—ã–∫—É–ø–∞",
    "–û–±—Ä–∞–∑—Ü—ã –¥–æ–≥–æ–≤–æ—Ä–æ–≤ —Å—É–±–∞—Ä–µ–Ω–¥—ã",
    
    "–û–±—Ä–∞–∑—Ü—ã –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –∫—É–ø–ª–∏-–ø—Ä–æ–¥–∞–∂–∏",
    "–î–æ–≥–æ–≤–æ—Ä—ã –∫—É–ø–ª–∏-–ø—Ä–æ–¥–∞–∂–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
    
    "–û–±—Ä–∞–∑—Ü—ã –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –ø–æ–¥—Ä—è–¥–∞",
    "–û–±—Ä–∞–∑—Ü—ã –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥",
    "–û–±—Ä–∞–∑—Ü—ã –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –ì–ü–•",
    "–ê–≥–µ–Ω—Ç—Å–∫–∏–µ –¥–æ–≥–æ–≤–æ—Ä—ã: –æ–±—Ä–∞–∑—Ü—ã",
    "–®–∞–±–ª–æ–Ω—ã –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –ø–æ—Å—Ç–∞–≤–∫–∏",
    "–®–∞–±–ª–æ–Ω—ã –¥–æ–≥–æ–≤–æ—Ä–æ–≤ —Ü–µ—Å—Å–∏–∏",
    "–î–æ–≥–æ–≤–æ—Ä—ã —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞",
    "–®–∞–±–ª–æ–Ω—ã –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –∞–≤—Ç–æ—Ä—Å–∫–æ–≥–æ –∑–∞–∫–∞–∑–∞",
    
    "–û–±—Ä–∞–∑—Ü—ã –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –∑–∞–π–º–∞",
    "–†–∞—Å–ø–∏—Å–∫–∏ 2025",
    
    "–û–±—Ä–∞–∑—Ü—ã –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –ø–æ—Ä—É—á–∏—Ç–µ–ª—å—Å—Ç–≤–∞",
    "–û–±—Ä–∞–∑—Ü—ã –¥–æ–≥–æ–≤–æ—Ä–æ–≤ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è",
    "–û–±—Ä–∞–∑—Ü—ã –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –¥–∞—Ä–µ–Ω–∏—è",
    "–û–±—Ä–∞–∑—Ü—ã –¥–æ–≥–æ–≤–æ—Ä–æ–≤ —Å—Å—É–¥—ã",
    "–û–±—Ä–∞–∑—Ü—ã –¥–æ–≥–æ–≤–æ—Ä–æ–≤ —Ö—Ä–∞–Ω–µ–Ω–∏—è",
    "–û–±—Ä–∞–∑—Ü—ã –¥–æ–≥–æ–≤–æ—Ä–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º—É—â–µ—Å—Ç–≤–æ–º",
    "–ö–æ–º–∏—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–æ–≥–æ–≤–æ—Ä—ã: –æ–±—Ä–∞–∑—Ü—ã –∏ —à–∞–±–ª–æ–Ω—ã",
    "–î–æ–≥–æ–≤–æ—Ä—ã –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π –∫–æ–Ω—Ü–µ—Å—Å–∏–∏",
    "–û–±—Ä–∞–∑—Ü—ã –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –ª–∏–∑–∏–Ω–≥–∞",
    "–û–±—Ä–∞–∑—Ü—ã –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã—Ö –¥–æ–≥–æ–≤–æ—Ä–æ–≤",
    "–ë—Ä–∞—á–Ω—ã–µ –¥–æ–≥–æ–≤–æ—Ä—ã: –æ–±—Ä–∞–∑—Ü—ã –∏ –ø—Ä–∏–º–µ—Ä—ã",
    
    "–û–±—Ä–∞–∑—Ü—ã —Ç—Ä—É–¥–æ–≤—ã—Ö –¥–æ–≥–æ–≤–æ—Ä–æ–≤",
    "–î–æ–≥–æ–≤–æ—Ä—ã –Ω–∞–π–º–∞: –æ–±—Ä–∞–∑—Ü—ã –∏ —à–∞–±–ª–æ–Ω—ã",
    
    "–û–±—Ä–∞–∑—Ü—ã –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –ø–µ—Ä–µ–≤–æ–∑–∫–∏",
    
    "–î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞"
]

@dp.message(F.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è –≤ –ì–ö –†–§")
async def on_check_by_detected_topic(message: Message, state: FSMContext):
    if not os.path.exists(PDF_PATH):
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-–¥–æ–≥–æ–≤–æ—Ä.")
        return

    await message.answer("–û–ø—Ä–µ–¥–µ–ª—è—é —Ç–µ–º—É –¥–æ–≥–æ–≤–æ—Ä–∞ –∏ –∑–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ –ì–ö...")
    await message.answer("‚è≥")

    try:
        from functions_for_agent import detect_contract_topic_gigachat, check_contract_by_detected_topic

        topic = detect_contract_topic_gigachat(PDF_PATH, TOPICS)
        await message.answer(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: *{topic}*", parse_mode="Markdown")

        audit_path, summary_path = check_contract_by_detected_topic(PDF_PATH, topic)

        if os.path.exists(audit_path):
            await message.answer_document(types.FSInputFile(audit_path), caption="üìé –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É")

        if os.path.exists(summary_path):
            await message.answer_document(types.FSInputFile(summary_path), caption="üìÑ –ö—Ä–∞—Ç–∫–æ–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ")

    except Exception as e:
        await message.answer(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {str(e)}")





# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())